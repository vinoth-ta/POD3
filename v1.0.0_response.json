{"success":true,"message":"Notebook generated successfully.","notebook_id":"TODO","notebook_name":"generated_notebook.py","data":"# Databricks notebook source\n# MAGIC %md\n# MAGIC ## Overview\n# MAGIC This code is generated by FDN Code Genaration Tool.The purpose of this notebook is to transform and ingest data from Bronze Layer to Silver Layer for table(s) XTNElectricityBasedEmission.\n# MAGIC\n# MAGIC ##### Project Name: <Project_Name>\n# MAGIC\n# MAGIC ### Version History\n# MAGIC\n# MAGIC | S. No | Author | Date | Desc |\n# MAGIC | ------ | ------ | ------ | ------ |\n# MAGIC | 1. | vinoth.premkumar | 2025-07-28 | <Description> |\n# MAGIC\n# MAGIC ### Source and Target Info\n# MAGIC\n# MAGIC | Source DB  | Source Table |  Target DB | Target Table |\n# MAGIC |------|------ |--------|--------|\n# MAGIC |<Bronze Schema> |<Bronze Table>| <Silver Schema> | XTNElectricityBasedEmission |\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Importing Necessary Packages\n\n# COMMAND ----------\n\nimport re\nimport json\nfrom pyspark.sql.functions import *\nfrom datetime import datetime\nfrom cdo_audit_framework_wd_la import audit_utilities as au\nfrom pyspark.sql.types import StringType\nfrom typing import Final\nfrom cdo_dq_framework import dqm_framework\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Getting values from widgets\n\n# COMMAND ----------\n\ndbutils.widgets.text(\"InputParam\", \"{}\", \"InputParam\")\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Running Utility Notebook\n\n# COMMAND ----------\n\n# MAGIC %run /data_framework/release/di_framework/common_utility\n\n# COMMAND ----------\n\n# initialising domain utilities\ndm_utils = FrameworkDomainUtils()\n\n# COMMAND ----------\n\ntry:\n    widgetParams = dm_utils.get_silver_notebook_arguments(getArgument(\"InputParam\"))\nexcept Exception as e:\n    widgetParams = dm_utils.parse_input_json(getArgument(\"InputParam\"))\n    # Additional Parameters\n    widgetParams[\"load_ts\"] = datetime.utcnow().strftime(\"%Y-%m-%d %H:%M:%S.%f\")[:-3]\n    widgetParams[\"full_notebook_path\"] = dbutils.notebook.entry_point.getDbutils().notebook().getContext().notebookPath().get()\n    widgetParams[\"notebook_job_url\"] = au.get_notebook_job_url()\n    dm_utils.dm_utils.post_audit_log(\n        status_cd_failure,\n        f\"Silver Notebook process failed owing to below reason:-\\n{e}\",\n        widgetParams\n    )\n    raise e\n\n# COMMAND ----------\n\nprint(f\"[INFO] Widget Parameters :\\n{widgetParams}\")\n\n# COMMAND ----------\n\n# Declaring Variables\ntarget_table_nm = widgetParams[\"SilverTableName\"]\ntarget_db_nm = widgetParams.get(\"SilverDBDict\")[target_table_nm][\"database_name\"]\nload_ts = widgetParams[\"load_ts\"]\n\n#Setting default init variables below if present in STTM\n<default_init_variables>\n    \n# Audit Logging\nstatus_cd_initial=\"I\"\nstatus_cd_progess=\"P\"\nstatus_cd_success=\"S\"\nstatus_cd_failure=\"F\"\nwidgetParams[\"full_notebook_path\"] = dbutils.notebook.entry_point.getDbutils().notebook().getContext().notebookPath().get()\nwidgetParams[\"notebook_job_url\"] = au.get_notebook_job_url()\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Audit Logic - Initialization\n\n# COMMAND ----------\n\ndm_utils.post_audit_log(\n    status_cd_initial,\n    f\"Silver Notebook process initialized for {target_table_nm} table(s) of schema {target_db_nm}\",\n    widgetParams,\n)\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Bronze Data Deduplication if applicable\n\n# COMMAND ----------\n\n\n# COMMAND ----------\n# The below code snippet is AI-Generated, please review for accuracy ...\n\n\n# COMMAND ----------\ntry:\n    transform_sql_query_dict = {\n    \ttarget_table_nm: {\n    \t\t\"sql\": \"\"\"SELECT \n    \t\t\tCONCAT(tbl_snt_csr_sdentitiesdata.CS_EntityRef, '|', CAST(tbl_snt_csr_sdentitiesdata.ReportingPeriod AS TIMESTAMP), '|', tbl_snt_csr_sdentitiesdata.Ref) AS ElectricityEmissionUniqueId,\n    \t\t\ttbl_snt_csr_sdentitiesdata.CS_EntityRef AS ReportingEntityId,\n    \t\t\tCAST(tbl_snt_csr_sdentitiesdata.ReportingPeriod AS TIMESTAMP) AS PeriodStartDateTime,\n    \t\t\t'Default Value' AS ReportingEntityTypeName,\n    \t\t\ttbl_snt_csr_sdentitiesdata.Frequency_FK_Id AS FrequencyId,\n    \t\t\tfueltype.FuelTypeId AS FuelTypeId,\n    \t\t\ttbl_snt_csr_sdentitiesdata.Ref AS SustainProcessCode,\n    \t\t\txtnenvironmentalsocialgovernancestandarddisclosuretype.StandardDisclosureId AS StandardDisclosureId,\n    \t\t\tCountry.Iso2LetterCountryCode AS CountryIso2Code,\n    \t\t\tCOALESCE(tbl_snt_csr_sdentitiesdata.ValueNumber, tbl_snt_csr_sdentitiesdata.ValueText) AS Co2EEmissionUnitQuantity,\n    \t\t\tCONCAT(tbl_snt_csr_sdentitiesdata.CS_UnitSearch_FK_Id, fdn_masterData_public.emplyee.country_code) AS Co2EEmissionUnitOfMeasureCode,\n    \t\t\ttbl_snt_csr_sdentitiesdata.XTNDFSystemId AS XTNDFSystemId,\n    \t\t\ttbl_snt_csr_sdentitiesdata.XTNDFReportingUnitId AS XTNDFReportingUnitId,\n    \t\t\ttbl_snt_csr_sdentitiesdata.XTNCreatedTime AS XTNCreatedTime,\n    \t\t\ttbl_snt_csr_sdentitiesdata.XTNCreatedById AS XTNCreatedById,\n    \t\t\ttbl_snt_csr_sdentitiesdata.XTNUpdatedTime AS XTNUpdatedTime,\n    \t\t\ttbl_snt_csr_sdentitiesdata.XTNUpdatedById AS XTNUpdatedById\n    \t\tFROM {BronzeDBName}.{BronzeTblName} AS tbl_snt_csr_sdentitiesdata\n    \t\tLEFT JOIN fueltype ON fueltype.FuelTypeName = tbl_snt_csr_sdentitiesdata.FuelTypeName\n    \t\tLEFT JOIN xtnenvironmentalsocialgovernancestandarddisclosuretype ON manualmyehsfuelenergybifurcationconfiguration.ReportingCategoryName = xtnenvironmentalsocialgovernancestandarddisclosuretype.StandardDisclosureName\n    \t\tLEFT JOIN Country ON tbl_snt_csr_sdentitiesdata.CS_CountryName = Country.CountryName\n    \t\tQUALIFY ROW_NUMBER()\n    \t\tOVER (PARTITION BY tbl_snt_csr_sdentitiesdata.Ref\n    \t\tORDER BY CAST(tbl_snt_csr_sdentitiesdata.ZTIMESTAMP AS BIGINT) DESC) = 1\n    \t\t\"\"\".format(target_db_name=target_db_nm,**widgetParams),\n    \t\t\"merge_key\": \"Ref\",\n    \t\t\"partition_columns\": \"ReportingPeriod\",\n    \t\t\"merge_type\": \"upsert\",\n    \t\t\"format_type\": \"delta\",\n    \t\t\"output_directory_name\": f\"silver/database/{target_table_nm}\"\n    \t}\n    }\nexcept Exception as e:\n    dm_utils.post_audit_log(\n        status_cd_failure,\n        f\"Silver Notebook process failed for {target_table_nm} table(s) of schema {target_db_nm} owing to below reason:-\\n{e}\",\n        widgetParams,\n    )\n    raise e\n\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Validating input DataFrame Schema and target Silver Table Schema (column name and datatypes)\n\n# COMMAND ----------\n\ntry:\n    dm_utils.silver_table_columns_match(widgetParams, transform_sql_query_dict)\nexcept Exception as e:\n    raise e   \n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Executing Silver DQ rules\n\n# COMMAND ----------\n\n# Setting flags to enable DQ checks\nwidgetParams[\"dq_dataset_name\"] = widgetParams[\"system_name\"]\ndq_enable_flag = IsDqConfigured(widgetParams, 'silver')\n\n# COMMAND ----------\n\ntry:\n    if dq_enable_flag:\n        print(f\"Silver DQ validation is started for the table {target_table_nm} {load_ts}\")\n        dm_utils.silver_table_dq_rules_enablement(target_table_nm, widgetParams)\n        print(f\"Silver DQ validation is completed for the table {target_table_nm} {load_ts}\")\n\nexcept Exception as e:\n    dm_utils.post_audit_log(\n        status_cd_failure,\n        f\"Silver Notebook DQ process failed for {target_table_nm} table(s) of schema {target_db_nm} owing to below reason:-\\n{e}\",\n        widgetParams,\n    )\n    raise e\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Ingesting transformed data into Silver table\n\n# COMMAND ----------\n\ntry:\n    print(f\"Starting silver ingestion for {target_table_nm}\")\n    load_child_silver_tbls(transform_sql_query_dict, widgetParams)\n    print(f\"Silver ingestion completed for {target_table_nm}\")\n    dm_utils.post_audit_log(\n        status_cd_success,\n        f\"Silver Notebook process completed for {target_table_nm} table(s) of schema {target_db_nm} successfully\",\n        widgetParams,\n    )\n\nexcept Exception as e:\n    dm_utils.post_audit_log(\n        status_cd_failure,\n        f\"Silver Notebook process failed for {target_table_nm} table(s) of schema {target_db_nm} owing to below reason:-\\n{e}\",\n        widgetParams,\n    )\n    raise e\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Get Load Statistics\n\n# COMMAND ----------\n\nresult_dict = dm_utils.get_statistics_of_data_loaded(target_db_nm+\".\"+target_table_nm, widgetParams[\"load_ts\"])\nprint(result_dict)\n\n# COMMAND ----------\n\n# MAGIC %md\n# MAGIC ### Returning Control to Parent Notebook\n\n# COMMAND ----------\n\ntry:\n    dbutils.notebook.exit(\"success\")\n\nexcept Exception as e:\n    if str(e) == \"success\":\n        print(\"Catching unintended Exception raised due to dbutils.notebook.exit with msg -\", e)\n        dbutils.notebook.exit(\"success\")  # This will finally return the control to the parent notebook\n    else:\n        raise e"}