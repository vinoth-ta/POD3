{#-- Create filtered list of target table keys --#}
{%- set table_keys = [] -%}
{%- for key in metadata.keys() -%}
    {%- if key not in ["user_id", "date_stamp"] -%}
        {%- set _ = table_keys.append(key) -%}
    {%- endif -%}
{%- endfor -%}
# Databricks notebook source
# MAGIC %md
# MAGIC ## Overview
# MAGIC This code is generated by FDN Code Genaration Tool.The purpose of this notebook is to transform and ingest data from Bronze Layer to Silver Layer for table(s) {{ table_keys | join(', ') }}.
# MAGIC
# MAGIC ##### Project Name: <Project_Name>
# MAGIC
# MAGIC ### Version History
# MAGIC
# MAGIC | S. No | Author | Date | Desc |
# MAGIC | ------ | ------ | ------ | ------ |
# MAGIC | 1. | {{ metadata["user_id"] }} | {{ metadata["date_stamp"] }} | <Description> |
# MAGIC
# MAGIC ### Source and Target Info
# MAGIC
# MAGIC | Source DB  | Source Table |  Target DB | Target Table |
# MAGIC |------|------ |--------|--------|
# MAGIC |<Bronze Schema> |<Bronze Table>| <Silver Schema> | {{ table_keys | join(', ') }} |

# COMMAND ----------

# MAGIC %md
# MAGIC ### Importing Necessary Packages

# COMMAND ----------

import re
import json
from pyspark.sql.functions import *
from datetime import datetime
from cdo_audit_framework_wd_la import audit_utilities as au
from pyspark.sql.types import StringType
from typing import Final
from cdo_dq_framework import dqm_framework

# COMMAND ----------

# MAGIC %md
# MAGIC ### Getting values from widgets

# COMMAND ----------

dbutils.widgets.text("InputParam", "{}", "InputParam")

# COMMAND ----------

# MAGIC %md
# MAGIC ### Running Utility Notebook

# COMMAND ----------

# MAGIC %run /data_framework/release/di_framework/common_utility

# COMMAND ----------

# initialising domain utilities
dm_utils = FrameworkDomainUtils()

# COMMAND ----------

try:
    widgetParams = dm_utils.get_silver_notebook_arguments(getArgument("InputParam"))
except Exception as e:
    widgetParams = dm_utils.parse_input_json(getArgument("InputParam"))
    # Additional Parameters
    widgetParams["load_ts"] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    widgetParams["full_notebook_path"] = dbutils.notebook.entry_point.getDbutils().notebook().getContext().notebookPath().get()
    widgetParams["notebook_job_url"] = au.get_notebook_job_url()
    dm_utils.dm_utils.post_audit_log(
        status_cd_failure,
        f"Silver Notebook process failed owing to below reason:-\n{e}",
        widgetParams
    )
    raise e

# COMMAND ----------

print(f"[INFO] Widget Parameters :\n{widgetParams}")

# COMMAND ----------

# Declaring Variables
target_table_nm = widgetParams["SilverTableName"]
target_db_nm = widgetParams.get("SilverDBDict")[target_table_nm]["database_name"]
load_ts = widgetParams["load_ts"]

#Setting default init variables below if present in STTM
<default_init_variables>
    
# Audit Logging
status_cd_initial="I"
status_cd_progess="P"
status_cd_success="S"
status_cd_failure="F"
widgetParams["full_notebook_path"] = dbutils.notebook.entry_point.getDbutils().notebook().getContext().notebookPath().get()
widgetParams["notebook_job_url"] = au.get_notebook_job_url()

# COMMAND ----------

# MAGIC %md
# MAGIC ### Audit Logic - Initialization

# COMMAND ----------

dm_utils.post_audit_log(
    status_cd_initial,
    f"Silver Notebook process initialized for {target_table_nm} table(s) of schema {target_db_nm}",
    widgetParams,
)

# COMMAND ----------

# MAGIC %md
# MAGIC ### Bronze Data Deduplication if applicable

# COMMAND ----------
{% if metadata.values() | selectattr('source_deduplication', 'equalto', 'Y') | list %}
bronze_data_df = spark.sql("""
                        Select *, row_number() over (PARTITION BY ({% for tbl, info in metadata.items() -%} {{ info.source_partitionBy_columns }} {%- endfor %}) ORDER BY {% for tbl, info in metadata.items() -%} {{ info.source_orderBy_columns }} {%- endfor %} DESC) as ROWNUM from
                        {BronzeDBName}.{BronzeTblName}
                        where trim(XTNUpdatedById)=trim('{job_id}')
                        """.format(**widgetParams)) 
bronze_data_df.createOrReplaceTempView('bronze_data')
{% endif %}

# COMMAND ----------
# The below code snippet is AI-Generated, please review for accuracy ...

{% for sql_block in spark_sql_blocks %}
{{ sql_block.comment }}
try:
    {{ sql_block.query | indent(4) }}
except Exception as e:
    dm_utils.post_audit_log(
        status_cd_failure,
        f"Silver Notebook process failed for {target_table_nm} table(s) of schema {target_db_nm} owing to below reason:-\n{e}",
        widgetParams,
    )
    raise e
{% endfor %}

# COMMAND ----------

# MAGIC %md
# MAGIC ### Validating input DataFrame Schema and target Silver Table Schema (column name and datatypes)

# COMMAND ----------

try:
    dm_utils.silver_table_columns_match(widgetParams, transform_sql_query_dict)
except Exception as e:
    raise e   

# COMMAND ----------

# MAGIC %md
# MAGIC ### Executing Silver DQ rules

# COMMAND ----------

# Setting flags to enable DQ checks
widgetParams["dq_dataset_name"] = widgetParams["system_name"]
dq_enable_flag = IsDqConfigured(widgetParams, 'silver')

# COMMAND ----------

try:
    if dq_enable_flag:
        print(f"Silver DQ validation is started for the table {target_table_nm} {load_ts}")
        dm_utils.silver_table_dq_rules_enablement(target_table_nm, widgetParams)
        print(f"Silver DQ validation is completed for the table {target_table_nm} {load_ts}")

except Exception as e:
    dm_utils.post_audit_log(
        status_cd_failure,
        f"Silver Notebook DQ process failed for {target_table_nm} table(s) of schema {target_db_nm} owing to below reason:-\n{e}",
        widgetParams,
    )
    raise e

# COMMAND ----------

# MAGIC %md
# MAGIC ### Ingesting transformed data into Silver table

# COMMAND ----------

try:
    print(f"Starting silver ingestion for {target_table_nm}")
    load_child_silver_tbls(transform_sql_query_dict, widgetParams)
    print(f"Silver ingestion completed for {target_table_nm}")
    dm_utils.post_audit_log(
        status_cd_success,
        f"Silver Notebook process completed for {target_table_nm} table(s) of schema {target_db_nm} successfully",
        widgetParams,
    )

except Exception as e:
    dm_utils.post_audit_log(
        status_cd_failure,
        f"Silver Notebook process failed for {target_table_nm} table(s) of schema {target_db_nm} owing to below reason:-\n{e}",
        widgetParams,
    )
    raise e

# COMMAND ----------

# MAGIC %md
# MAGIC ### Get Load Statistics

# COMMAND ----------

result_dict = dm_utils.get_statistics_of_data_loaded(target_db_nm+"."+target_table_nm, widgetParams["load_ts"])
print(result_dict)

# COMMAND ----------

# MAGIC %md
# MAGIC ### Returning Control to Parent Notebook

# COMMAND ----------

try:
    dbutils.notebook.exit("success")

except Exception as e:
    if str(e) == "success":
        print("Catching unintended Exception raised due to dbutils.notebook.exit with msg -", e)
        dbutils.notebook.exit("success")  # This will finally return the control to the parent notebook
    else:
        raise e